# -*- coding: utf-8 -*-
"""automation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BhwX6aUAR-FE5gcHBAOiFczGVVdP4zIx
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
from io import BytesIO

st.set_page_config(page_title="Control Chart Visualizer", layout="wide")
st.title("üìà Control Chart Visualizer")

# === Clean % strings ===
def clean_percent_string(x):
    if isinstance(x, str) and x.strip().endswith('%'):
        try:
            return float(x.strip().replace('%', ''))
        except:
            return np.nan
    try:
        return float(x)
    except:
        return np.nan

# === File Upload ===
uploaded_file = st.file_uploader("Upload your CSV file", type="csv")

if uploaded_file:
    df_raw = pd.read_csv(uploaded_file, header=None)

    raw_names = df_raw.iloc[0, 5:].tolist()
    compound_names = pd.Series(raw_names).fillna('').astype(str).str.strip().str.replace(r'\s+', ' ', regex=True).tolist()

    # === Metadata ===
    metadata_raw = {
        'total_instances': df_raw.iloc[4, 5:].apply(clean_percent_string).values,
        'min': df_raw.iloc[5, 5:].apply(clean_percent_string).values,
        'max': df_raw.iloc[6, 5:].apply(clean_percent_string).values,
        'avg': df_raw.iloc[7, 5:].apply(clean_percent_string).values,
        'sd1': df_raw.iloc[8, 5:].apply(clean_percent_string).values,
        'sd2': df_raw.iloc[9, 5:].apply(clean_percent_string).values,
        'sd3': df_raw.iloc[10, 5:].apply(clean_percent_string).values,
    }
    metadata = {key: pd.Series(val, index=compound_names) for key, val in metadata_raw.items()}

    # === Data Processing ===
    instance_count = int(metadata['total_instances'].dropna().iloc[0])
    start_row = 11
    end_row = start_row + instance_count

    data = df_raw.iloc[start_row:end_row, [2, 4] + list(range(5, df_raw.shape[1]))].copy()
    data.columns = ['Date', 'Sequence'] + compound_names
    data['Date'] = pd.to_datetime(data['Date'], errors='coerce')
    data['Sequence'] = pd.to_numeric(data['Sequence'], errors='coerce')

    for col in compound_names:
        data[col] = data[col].apply(clean_percent_string)

    data = data[~(data['Date'].isna() & data['Sequence'].isna())]
    data.sort_values(['Date', 'Sequence'], inplace=True)

    valid_compounds = [c for c in compound_names if data[c].notna().any()]
    st.write(f"‚úÖ Loaded data with **{len(data)} rows** and **{len(valid_compounds)} compounds** available.")

    # === UI Options ===
    compound = st.selectbox("Select compound to plot", valid_compounds)
    fig_width = st.selectbox("Select plot width", options=[12, 20, 40], index=0)
    show_sequence = st.checkbox("Show Sequence # in X-axis", value=True)
    allow_download = st.checkbox("Enable download", value=True)

    if compound:
        y = data[compound]
        x = data['Date']

        valid_mask = y.notna() & x.notna()
        x_valid = x[valid_mask]
        y_valid = y[valid_mask]
        seq_valid = data['Sequence'][valid_mask]

        avg = metadata['avg'].get(compound)
        sd1 = metadata['sd1'].get(compound)
        sd2 = metadata['sd2'].get(compound)
        sd3 = metadata['sd3'].get(compound)

        fig, ax = plt.subplots(figsize=(fig_width, 5))
        ax.scatter(x_valid, y_valid, color='blue', s=30, alpha=0.9, edgecolors='black', linewidths=0.3, label='Instances')

        # SD Lines
        for sd, color, label in zip([sd1, sd2, sd3], ['red', 'orange', 'green'], ['¬±1 SD', '¬±2 SD', '¬±3 SD']):
            if pd.notna(avg) and pd.notna(sd):
                ax.axhline(avg + sd, color=color, linestyle='dotted', label=f'{label} upper')
                ax.axhline(avg - sd, color=color, linestyle='dotted', label=f'{label} lower')

        ax.set_title(f'{compound} Over Time')
        ax.set_ylabel(compound)

        if show_sequence:
            # Safely convert sequence with fillna
            safe_seq = seq_valid.fillna(-1).astype(int).astype(str)
            x_labels = x_valid.dt.strftime('%Y-%m-%d') + ' (#' + safe_seq + ')'
            ax.set_xticks(x_valid)
            ax.set_xticklabels(x_labels, rotation=90, fontsize=8)

        else:
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
            plt.xticks(rotation=45)

        ax.grid(True)
        ax.legend()
        st.pyplot(fig)

        # Save/download figure
        if allow_download:
            buffer = BytesIO()
            fig.savefig(buffer, format="png", dpi=300, bbox_inches="tight")
            st.download_button("üì• Download Figure as PNG", data=buffer.getvalue(), file_name=f"{compound}_control_chart.png", mime="image/png")

        # Report
        last3 = y_valid.tail(3)
        in_sd1 = last3.between(avg - sd1, avg + sd1).sum() if pd.notna(sd1) else 0
        in_sd2 = last3.between(avg - sd2, avg + sd2).sum() if pd.notna(sd2) else 0
        in_sd3 = last3.between(avg - sd3, avg + sd3).sum() if pd.notna(sd3) else 0

        st.write(f"### üìä Report for {compound}:")
        st.write(f"Last 3 values: {last3.tolist()}")
        if in_sd1 == 3:
            st.success("‚úÖ All last 3 values are within ¬±1 SD (Red zone).")
        elif in_sd2 == 3:
            st.info("üü† All last 3 values are within ¬±2 SD (Orange zone).")
        elif in_sd3 == 3:
            st.info("üü¢ All last 3 values are within ¬±3 SD (Green zone).")
        else:
            st.warning("‚ùó At least one of the last 3 values lies outside ¬±3 SD (Possible outlier).")